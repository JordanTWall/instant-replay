Explanation of the Structure

public/: Contains the static assets like index.html.
src/: Main source code folder.
assets/: Contains non-JavaScript assets like images.
images/: Store your images here.
components/: Contains all your React components.
hooks/: Contains custom React hooks.
pages/: Contains different page components if you're using a router.
services/: Contains service functions, such as API calls.
styles/: Contains global styles and Tailwind configurations.
tailwind.css: Main Tailwind CSS file.
types/: Contains TypeScript type definitions.
App.tsx: Main App component.
main.tsx: Entry point for the React application.
index.css: Global CSS file.
.gitignore: Specifies which files and directories to ignore in Git.
package.json: Lists dependencies and scripts for your project.
postcss.config.js: PostCSS configuration file.
tailwind.config.js: Tailwind CSS configuration file.
tsconfig.json: TypeScript configuration file.
vite.config.ts: Vite configuration file.



NOTE: NEED TO REMEMBER EDGE CASES. SUPERBOWL AND PLAYOFF "STAGES" AND "WEEK" ARE LISTED AS NULL. REPLACE WITH PLAYOFFS! OOH! you could just look up every superbowl for the past 14 years and hard code it in the program to recognize it as the superbowl, and every other null as playoffs. That's probably really smart, although not effecient .

WE'RE GOING TO STEAL THE DECLARATION OF INDEPENDENCE!!!!! (i.e we're going to steal the database. )



Gameplan tomorrow - 

fix the timer by simplifying the shit out of it. oh wow. i can simplify this shit out of this entirely. run the code every 50ms. (we can nail down the time later) so 20 times a second. all it will be doing is reading an array. right? 

basically - take the gamedata. put the gamedata into an array of objects. then populate the array with dummy timestamps. 

parse the minute bit. then add dummy values for seconds. extract the array. use the array to run the function. 

this is way too complicated. why did i make it this complicated? oh well. the more complicated it is the more impressive it will be. 

a better way of doing this... would be to get all the time values from the gameevents object first. or is it an array...? change the type so it is an array of game events , but optionally with dummy events. or may a new type all together. extract the quarter and minute. 4 quarters. use logic to determine if there is an overtime quarter. 15 minutes in a quarter. for each minute make add 5 dummy values that are not the minute of any of the events. 

rank them in order. pass this value onto the next function. run the animation. 

potential problems... asking typescript to read a string as a number... boy this is annoying. 